package cc.creativecomputing.gl4.texture;

import com.jogamp.opengl.GL4;

/**
 * different targets for different texture types
 * @author christianr
 *
 */
public enum GLTextureTarget {
	/**
	 * one dimensional texture
	 */
	TEXTURE_1D(GL4.GL_TEXTURE_1D),
	/**
	 * 
	 */
	TEXTURE_2D(GL4.GL_TEXTURE_2D),
	TEXTURE_3D(GL4.GL_TEXTURE_3D),
	TEXTURE_1D_ARRAY(GL4.GL_TEXTURE_1D_ARRAY),
	TEXTURE_2D_ARRAY(GL4.GL_TEXTURE_2D_ARRAY),
	TEXTURE_RECTANGLE(GL4.GL_TEXTURE_RECTANGLE),
	TEXTURE_BUFFER(GL4.GL_TEXTURE_BUFFER),
	TEXTURE_CUBE_MAP(GL4.GL_TEXTURE_CUBE_MAP),
	TEXTURE_CUBE_MAP_ARRAY(GL4.GL_TEXTURE_CUBE_MAP_ARRAY),
	TEXTURE_2D_MULTISAMPLE(GL4.GL_TEXTURE_2D_MULTISAMPLE),
	TEXTURE_2D_MULTISAMPLE_ARRAY(GL4.GL_TEXTURE_2D_MULTISAMPLE_ARRAY),
	TEXTURE_CUBE_MAP_POSITIVE_X(GL4.GL_TEXTURE_CUBE_MAP_POSITIVE_X),
	TEXTURE_CUBE_MAP_NEGATIVE_X(GL4.GL_TEXTURE_CUBE_MAP_NEGATIVE_X),
	TEXTURE_CUBE_MAP_POSITIVE_Y(GL4.GL_TEXTURE_CUBE_MAP_POSITIVE_Y),
	TEXTURE_CUBE_MAP_NEGATIVE_Y(GL4.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y),
	TEXTURE_CUBE_MAP_POSITIVE_Z(GL4.GL_TEXTURE_CUBE_MAP_POSITIVE_Z),
	TEXTURE_CUBE_MAP_NEGATIVE_Z(GL4.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z),
	PROXY_TEXTURE_2D(GL4.GL_PROXY_TEXTURE_2D),
	PROXY_TEXTURE_1D_ARRAY(GL4.GL_PROXY_TEXTURE_1D_ARRAY), 
	PROXY_TEXTURE_CUBE_MAP(GL4.GL_PROXY_TEXTURE_CUBE_MAP), 
	PROXY_TEXTURE_RECTANGLE(GL4.GL_PROXY_TEXTURE_RECTANGLE);
	
	private int _myGLID;
	
	GLTextureTarget(int theGLID){
		_myGLID = theGLID;
	}
	
	public int glID(){
		return _myGLID;
	}
	
	public boolean isArray(){
		return 
			this == GLTextureTarget.PROXY_TEXTURE_1D_ARRAY ||
			this == GLTextureTarget.TEXTURE_1D_ARRAY ||
			this == GLTextureTarget.TEXTURE_2D_ARRAY ||
			this == GLTextureTarget.TEXTURE_2D_MULTISAMPLE_ARRAY ||
			this == GLTextureTarget.TEXTURE_CUBE_MAP_ARRAY;
	}
	
	public static GLTextureTarget fromGLID(int theGLID){
		switch(theGLID){
		case GL4.GL_TEXTURE_1D:return TEXTURE_1D;
		case GL4.GL_TEXTURE_2D:return TEXTURE_2D;
		case GL4.GL_TEXTURE_3D:return TEXTURE_3D;
		case GL4.GL_TEXTURE_1D_ARRAY:return TEXTURE_1D_ARRAY;
		case GL4.GL_TEXTURE_2D_ARRAY:return TEXTURE_2D_ARRAY;
		case GL4.GL_TEXTURE_RECTANGLE:return TEXTURE_RECTANGLE;
		case GL4.GL_TEXTURE_BUFFER:return TEXTURE_BUFFER;
		case GL4.GL_TEXTURE_CUBE_MAP:return TEXTURE_CUBE_MAP;
		case GL4.GL_TEXTURE_CUBE_MAP_ARRAY:return TEXTURE_CUBE_MAP_ARRAY;
		case GL4.GL_TEXTURE_2D_MULTISAMPLE:return TEXTURE_2D_MULTISAMPLE;
		case GL4.GL_TEXTURE_2D_MULTISAMPLE_ARRAY:return TEXTURE_2D_MULTISAMPLE_ARRAY;
		case GL4.GL_TEXTURE_CUBE_MAP_POSITIVE_X:return TEXTURE_CUBE_MAP_POSITIVE_X;
		case GL4.GL_TEXTURE_CUBE_MAP_NEGATIVE_X:return TEXTURE_CUBE_MAP_NEGATIVE_X;
		case GL4.GL_TEXTURE_CUBE_MAP_POSITIVE_Y:return TEXTURE_CUBE_MAP_POSITIVE_Y;
		case GL4.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y:return TEXTURE_CUBE_MAP_NEGATIVE_Y;
		case GL4.GL_TEXTURE_CUBE_MAP_POSITIVE_Z:return TEXTURE_CUBE_MAP_POSITIVE_Z;
		case GL4.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z:return TEXTURE_CUBE_MAP_NEGATIVE_Z;
		}
		return null;
	}
}