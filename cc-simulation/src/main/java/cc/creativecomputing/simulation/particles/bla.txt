#version 120 

uniform sampler2D randomTexture;

float noise( in vec3 x ){
    vec3 p = floor(x);
    vec3 f = fract(x);
	f = f * f * (3.0 - 2.0 * f);
	
	vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;
	vec2 rg = texture2D( randomTexture, (uv+ 0.5) / 256.0 ).yx;//, -100.0
	return mix( rg.x, rg.y, f.z );
}

float octavedNoise(in vec3 p, int octaves, float gain, float lacunarity){
	float result = 0.0;
	float myFallOff = gain;
	float myAmp = 0.0;
	
	vec3 q = p;
	for(int i = 0; i < octaves; i++){
		myAmp += myFallOff;
		result += myFallOff * noise( q ); 
		q = q * lacunarity;
		myFallOff *= gain;
	}
	
	return result / myAmp;
}

uniform float deltaTime;

uniform sampler2DRect colorTexture;
uniform sampler2DRect staticPositions;
uniform sampler2DRect staticAges;
uniform sampler2DRect positionTexture;
uniform sampler2DRect velocityTexture;
uniform sampler2DRect infoTexture;
uniform float staticPositionBlend;

uniform sampler2DRect lifeTimeBlends;
uniform sampler2DRect groupInfoTexture;

float lifeTimeBlend(vec4 infos, vec4 groupInfos, float forceIndex){
	float progress = infos.x / infos.y;
	//if(groupInfos.x >= 0.)progress = groupInfos.x;
	return texture2DRect (lifeTimeBlends, vec2(progress * 100.0, forceIndex)).x;
}

float rand(vec2 n){
  return fract(sin(dot(n, vec2(12.9898,78.233)))* 43758.5453123);
}

const float PI = 3.1415926535897932384626433832795;

vec2 randDirection2D(vec2 n) {
	float angle = rand(n + 3000) * 2 * PI;
	return vec2(cos(angle), sin(angle));
}

vec3 randDirection3D(vec2 n) {
	float myTheta = rand(n + 3000) * PI;
	float myPhi = rand(n + 6000) * 2 * PI;
	
	return vec3(
		sin(myTheta) * cos(myPhi),
		sin(myTheta) * sin(myPhi),
		cos(myTheta)
	);
}

// insert forces

uniform float NoiseForceField_scale;
uniform float NoiseForceField_strength;
uniform vec3 NoiseForceField_offset;
uniform float NoiseForceField_index;

uniform int NoiseForceField_octaves;
uniform float NoiseForceField_gain;
uniform float NoiseForceField_lacunarity;
	
vec3 NoiseForceField_function(vec3 thePosition, vec3 theVelocity, vec4 theInfos, vec4 theGroupInfos, vec2 theTexID, float theDeltaTime){
	vec3 noisePosition = (thePosition + theVelocity) * NoiseForceField_scale + NoiseForceField_offset;
	vec3 result = vec3(
		octavedNoise(noisePosition, NoiseForceField_octaves, NoiseForceField_gain, NoiseForceField_lacunarity),
		octavedNoise(noisePosition+1000, NoiseForceField_octaves, NoiseForceField_gain, NoiseForceField_lacunarity),
		octavedNoise(noisePosition+2000, NoiseForceField_octaves, NoiseForceField_gain, NoiseForceField_lacunarity)
	) *2 - 1;
	/*
	noisePosition = (thePosition + theVelocity) * NoiseForceField_scale + NoiseForceField_offset.yzx;
	result += vec3(
		snoise(noisePosition),
		snoise(noisePosition+100),
		snoise(noisePosition+200)
	);
	*/
		//result *= 50 * theDeltaTime;
	return result * NoiseForceField_strength;
}

/*
uniform sampler2DRect Springs_targetPositionTexture;

uniform float Springs_strength;
uniform float Springs_index;

uniform vec3 Springs_center;
uniform float Springs_scale;
uniform float Springs_lookAhead;
uniform float Springs_maxForce;
uniform float Springs_nearDistance;
uniform float Springs_nearMaxForce;

vec3 Springs_function(vec3 thePosition, vec3 theVelocity, vec4 theInfos, vec4 theGroupInfos, vec2 theTexID, float theDeltaTime){
	
	vec4 targetInfos = texture2DRect (Springs_targetPositionTexture, theTexID);
	vec3 target = targetInfos.xyz * Springs_scale;
	
	float targetStrength = targetInfos.w;
		
	if(target.x == 0.0)return vec3(0.0);
		
	target += Springs_center;
	//float factor = (-dot(normalize(target - thePosition),normalize(theVelocity)) + 1) / 2;
	vec3 force = target - (thePosition + theVelocity * theDeltaTime * Springs_lookAhead);
		
	float distance = length(force);
	if(Springs_nearMaxForce > 0 && distance < Springs_nearDistance && distance > Springs_nearMaxForce){
		return force / distance * Springs_nearMaxForce * targetStrength;
	}
	if(Springs_maxForce > 0 && distance > Springs_maxForce){
		return force / distance * Springs_maxForce * targetStrength;
	}
	
	return force * Springs_strength;// * targetStrength * Springs_strength;// / (theDeltaTime * 60);
}
*/

uniform sampler2DRect Springs_idTexture;
uniform sampler2DRect Springs_infoTexture;
uniform vec2 Springs_textureSize;
	
uniform float Springs_springConstant;
uniform float Springs_strength;

uniform int Springs_numberOfBuffers;
	
vec3 springForce(vec3 thePosition1, vec3 thePosition2, float theRestLength, float theForceRestLength){
	vec3 delta = thePosition2 - thePosition1;
	float deltalength = length(delta);
	delta /= max(1,deltalength);
	float springForce = (deltalength - theRestLength) * Springs_springConstant * 0.1 * float(deltalength > theRestLength || theForceRestLength > 0);
	return delta * springForce;
}
	
// constrain a particle to be a fixed distance from another particle
//vec3 force(vec3 thePosition, vec3 theVelocity, float2 theTexID, float theDeltaTime){
vec3 Springs_function(vec3 thePosition, vec3 theVelocity, vec4 theInfos, vec4 theGroupInfos, vec2 theTexID, float theDeltaTime){
	vec3 force = vec3(0);
		
	for(int i = 0; i < Springs_numberOfBuffers;i++){
		vec2 myTexId = theTexID + Springs_textureSize * vec2(i, 0);
		vec4 ids = texture2DRect(Springs_idTexture, myTexId);
		vec4 infos = texture2DRect(Springs_infoTexture, myTexId);
		
		// get positions of neighbouring particles
		vec3 position1 = texture2DRect(positionTexture, ids.xy).xyz;
		vec3 position2 = texture2DRect(positionTexture, ids.zw).xyz;
			
		float restLength1 = infos.x;
		float restLength2 = infos.y;
		float forceRestLength1 = infos.z;
		float forceRestLength2 = infos.w;
		
		force += springForce(thePosition, position1, restLength1, forceRestLength1) * float(ids.x >= 0);
		force += springForce(thePosition, position2, restLength2, forceRestLength2) * float(ids.z >= 0);
			
			//continue;
	}

	return force * Springs_Springs_strength;
}


// insert constraints

vec3 bounceReflection(
	vec3 theVelocity, vec3 theNormal, float thePlacement,
	float theResilience, float theFriction, float theMinimalVelocity
){
	// Distibute velocity to normal and tangential contributions.
	float normalContribution = dot(theVelocity, theNormal);
	vec3 vNormal = normalContribution * theNormal;
	vec3 vTangent = theVelocity - vNormal;
	
	if (thePlacement < 0){
		// Get particle outside the collider as quickly as possible,
		// either with original or reflected velocity.
		
		if (normalContribution <= 0.0){
			return vTangent - vNormal;
		} else {
			return theVelocity;
		}
	} 
	
	// Slow down particle with friction only if slower than minimal velocity.
	if (length(theVelocity) < theMinimalVelocity)
		theFriction = 1.0;

	// Slowdown tangential movement with friction (in theory 1 - friction)
	// and reflected normal movement via resilience factor.
	return vTangent * theFriction - vNormal * theResilience;
}


uniform float useAgeBlends;

uniform vec3 moveAll;

void main (){
	vec2 texID = gl_FragCoord.xy;
	vec3 position = texture2DRect (positionTexture, texID).xyz;
	vec3 velocity = texture2DRect (velocityTexture, texID).xyz;
	vec4 infos = texture2DRect (infoTexture, texID);
	vec4 groupInfos = texture2DRect (groupInfoTexture, infos.zw);
	if(infos.z < 0)groupInfos = vec4(-1.0);
	vec4 color = texture2DRect (colorTexture, texID);
	vec3 acceleration = vec3(0,0,0);

// apply forces
	acceleration = acceleration + NoiseForceField_function(position,velocity,infos,groupInfos,texID,deltaTime) * lifeTimeBlend(infos, groupInfos, NoiseForceField_index);
	acceleration = acceleration + Springs_function(position,velocity,infos,groupInfos,texID,deltaTime) * lifeTimeBlend(infos, groupInfos, Springs_index);

	velocity = velocity + acceleration * (deltaTime * 60);

// apply constraints


	
	
	/*
	for(int i = 0; i < constraints.length;i++){
		velocity = constraints[i].constraint(velocity, position,texID, deltaTime);
	}
	
	for(int i = 0; i < impulses.length;i++){
		velocity += impulses[i].impulse(position,velocity, texID, deltaTime);
	}
	*/
	vec4 lastInfo = texture2DRect(infoTexture, texID);
	float myAge = lastInfo.x;
	vec2 myGroup = lastInfo.zw;

	float staticAge = texture2DRect (staticAges, texID).x;
	
	vec4 info = vec4(
		mix(lastInfo.x + deltaTime, staticAge, useAgeBlends),
		lastInfo.y,
		lastInfo.z,
		lastInfo.w
	);
	
	if(myAge >= lastInfo.y && lastInfo.z < 0.0)position = vec3(1000000,0,0);
	
	vec3 staticPosition = texture2DRect (staticPositions, texID).xyz;
	vec4 newPosition = vec4(mix(position + deltaTime * velocity, staticPosition, staticPositionBlend),1);
	newPosition.xyz += moveAll;
	
	gl_FragData[0] = newPosition;
	gl_FragData[1] = info;
	gl_FragData[2] = vec4(velocity, 1.0);
	gl_FragData[3] = color;
}