#-------------------------------------------------------------------------------
# Copyright (C) 2018 christianr
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
#version 120 

uniform sampler2D randomTexture;

float noise( in vec3 x ){
    vec3 p = floor(x);
    vec3 f = fract(x);
	f = f * f * (3.0 - 2.0 * f);
	
	vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;
	vec2 rg = texture2D( randomTexture, (uv+ 0.5) / 256.0 ).yx;//, -100.0
	return mix( rg.x, rg.y, f.z );
}

float octavedNoise(in vec3 p, int octaves, float gain, float lacunarity){
	float result = 0.0;
	float myFallOff = gain;
	float myAmp = 0.0;
	
	vec3 q = p;
	for(int i = 0; i < octaves; i++){
		myAmp += myFallOff;
		result += myFallOff * noise( q ); 
		q = q * lacunarity;
		myFallOff *= gain;
	}
	
	return result / myAmp;
}

uniform float deltaTime;

uniform sampler2DRect colorTexture;
uniform sampler2DRect staticPositions;
uniform sampler2DRect staticAges;
uniform sampler2DRect positionTexture;
uniform sampler2DRect velocityTexture;
uniform sampler2DRect infoTexture;
uniform float staticPositionBlend;

uniform sampler2DRect lifeTimeBlends;
uniform sampler2DRect groupInfoTexture;

float lifeTimeBlend(vec4 infos, vec4 groupInfos, float forceIndex){
	float progress = infos.x / infos.y;
	if(groupInfos.x >= 0.)progress = groupInfos.x;
	return texture2DRect (lifeTimeBlends, vec2(progress * 100.0, forceIndex)).x;
}

// insert forces
uniform vec3 gravity0_direction;
uniform float gravity0_strength;
uniform float gravity0_index;

vec3 gravity0_function(vec3 thePosition, vec3 theVelocity, vec4 theInfos, vec4 theGroupInfos, float theDeltaTime){
	return gravity0_direction * gravity0_strength; 
}


uniform float NoiseForceField1_scale;
uniform float NoiseForceField1_strength;
uniform vec3 NoiseForceField1_offset;
uniform float NoiseForceField1_index;

uniform int NoiseForceField1_octaves;
uniform float NoiseForceField1_gain;
uniform float NoiseForceField1_lacunarity;
	
vec3 NoiseForceField1_function(vec3 thePosition, vec3 theVelocity, vec4 theInfos, vec4 theGroupInfos, float theDeltaTime){
	vec3 noisePosition = (thePosition + theVelocity) * NoiseForceField1_scale + NoiseForceField1_offset;
	vec3 result = vec3(
		octavedNoise(noisePosition, NoiseForceField1_octaves, NoiseForceField1_gain, NoiseForceField1_lacunarity),
		octavedNoise(noisePosition+1000, NoiseForceField1_octaves, NoiseForceField1_gain, NoiseForceField1_lacunarity),
		octavedNoise(noisePosition+2000, NoiseForceField1_octaves, NoiseForceField1_gain, NoiseForceField1_lacunarity)
	) *2 - 1;
	/*
	noisePosition = (thePosition + theVelocity) * NoiseForceField1_scale + NoiseForceField1_offset.yzx;
	result += vec3(
		snoise(noisePosition),
		snoise(noisePosition+100),
		snoise(noisePosition+200)
	);
	*/
		//result *= 50 * theDeltaTime;
	return result * NoiseForceField1_strength;
}

uniform float ViscousDrag2_drag;
	
uniform float ViscousDrag2_strength;
uniform float ViscousDrag2_index;

vec3 ViscousDrag2_function(vec3 thePosition, vec3 theVelocity, vec4 theInfos, vec4 theGroupInfos, float theDeltaTime){
	return theVelocity * theDeltaTime * -ViscousDrag2_drag * ViscousDrag2_strength; 
}

uniform sampler2DRect target3_targetPositionTexture;

uniform float target3_strength;
uniform float target3_index;

uniform vec3 target3_center;
uniform float target3_scale;
uniform float target3_lookAhead;
uniform float target3_maxForce;
uniform float target3_nearDistance;
uniform float target3_nearMaxForce;

vec3 target3_function(vec3 thePosition, vec3 theVelocity, vec4 theInfos, vec4 theGroupInfos, float theDeltaTime){
	
	vec4 targetInfos = texture2DRect (target3_targetPositionTexture, theTexID);
	vec3 target = targetInfos.xyz * target3_scale;
	
	float targetStrength = targetInfos.w;
		
	if(target.x == 0.0)return vec3(0.0);
		
	target += target3_center;
	//float factor = (-dot(normalize(target - thePosition),normalize(theVelocity)) + 1) / 2;
	vec3 force = target - (thePosition + theVelocity * theDeltaTime * target3_lookAhead);
		
	float distance = length(force);
	if(target3_nearMaxForce > 0 && distance < target3_nearDistance && distance > target3_nearMaxForce){
		return force / distance * target3_nearMaxForce * targetStrength;
	}
	if(target3_maxForce > 0 && distance > target3_maxForce){
		return force / distance * target3_maxForce * targetStrength;
	}
	
	return force * target3_strength;// * targetStrength * target3_strength;// / (theDeltaTime * 60);
}


// insert constraints

vec3 bounceReflection(
	vec3 theVelocity, vec3 theNormal, float thePlacement,
	float theResilience, float theFriction, float theMinimalVelocity
){
	// Distibute velocity to normal and tangential contributions.
	float normalContribution = dot(theVelocity, theNormal);
	vec3 vNormal = normalContribution * theNormal;
	vec3 vTangent = theVelocity - vNormal;
	
	if (thePlacement < 0){
		// Get particle outside the collider as quickly as possible,
		// either with original or reflected velocity.
		
		if (normalContribution <= 0.0){
			return vTangent - vNormal;
		} else {
			return theVelocity;
		}
	} 
	
	// Slow down particle with friction only if slower than minimal velocity.
	if (length(theVelocity) < theMinimalVelocity)
		theFriction = 1.0;

	// Slowdown tangential movement with friction (in theory 1 - friction)
	// and reflected normal movement via resilience factor.
	return vTangent * theFriction - vNormal * theResilience;
}


uniform float useAgeBlends;

void main (){
	vec2 texID = gl_FragCoord.xy;
	vec3 position = texture2DRect (positionTexture, texID).xyz;
	vec3 velocity = texture2DRect (velocityTexture, texID).xyz;
	vec4 infos = texture2DRect (infoTexture, texID);
	vec4 groupInfos = texture2DRect (groupInfoTexture, infos.zw);
	if(infos.z < 0)groupInfos = vec4(-1.0);
	vec4 color = texture2DRect (colorTexture, texID);
	vec3 acceleration = vec3(0,0,0);

// apply forces
	acceleration = acceleration + gravity0_function(position,velocity,infos,groupInfos,deltaTime) * lifeTimeBlend(infos, groupInfos, gravity0_index);
	acceleration = acceleration + NoiseForceField1_function(position,velocity,infos,groupInfos,deltaTime) * lifeTimeBlend(infos, groupInfos, NoiseForceField1_index);
	acceleration = acceleration + ViscousDrag2_function(position,velocity,infos,groupInfos,deltaTime) * lifeTimeBlend(infos, groupInfos, ViscousDrag2_index);
	acceleration = acceleration + target3_function(position,velocity,infos,groupInfos,deltaTime) * lifeTimeBlend(infos, groupInfos, target3_index);

	velocity = velocity + acceleration * (deltaTime * 60);

// apply constraints


	
	
	/*
	for(int i = 0; i < constraints.length;i++){
		velocity = constraints[i].constraint(velocity, position,texID, deltaTime);
	}
	
	for(int i = 0; i < impulses.length;i++){
		velocity += impulses[i].impulse(position,velocity, texID, deltaTime);
	}
	*/
	vec4 lastInfo = texture2DRect(infoTexture, texID);
	float myAge = lastInfo.x;
	vec2 myGroup = lastInfo.zw;

	float staticAge = texture2DRect (staticAges, texID).x;
	
	vec4 info = vec4(
		mix(lastInfo.x + deltaTime, staticAge, useAgeBlends),
		lastInfo.y,
		lastInfo.z,
		lastInfo.w
	);
	
	if(myAge >= lastInfo.y && lastInfo.z < 0.0)position = vec3(1000000,0,0);
	
	vec3 staticPosition = texture2DRect (staticPositions, texID).xyz;
	vec4 newPosition = vec4(mix(position + deltaTime * velocity, staticPosition, staticPositionBlend),1); 
	
	gl_FragData[0] = newPosition;
	gl_FragData[1] = info;
	gl_FragData[2] = vec4(velocity, 1.0);
	gl_FragData[3] = color;
}
	           
