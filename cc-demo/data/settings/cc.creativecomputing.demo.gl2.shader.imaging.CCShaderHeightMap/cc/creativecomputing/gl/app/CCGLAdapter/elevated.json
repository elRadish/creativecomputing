{"value": {
  "lod": {
    "min": 0,
    "max": 10,
    "name": "lod",
    "value": 0
  },
  "shader": {
    "name": "shader",
    "value": {"shader objects": {
      "name": "shader objects",
      "value": {
        "fragment": {
          "name": "fragment",
          "source": "#1.4\n\n\nuniform float time; \nuniform sampler2D randomTexture;\nuniform vec2 randomTextureResolution; \n\nfloat noise( in vec3 x ){\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f * f * (3.0 - 2.0 * f);\n\t\n\tvec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n\tvec2 rg = texture2D( randomTexture, (uv+ 0.5) / 256.0 ).yx; //, -100.0\n\treturn mix( rg.x, rg.y, f.z ); \n}\n\nuniform int octaves;\nuniform float gain;\nuniform float lacunarity;\n\nuniform float speedGain;\nuniform vec3 noiseMovement;\n\nfloat octavedNoise(in vec3 p){\n\tfloat result = 0.0;\n\tfloat myFallOff = gain;\n\tfloat mySpeedFallOff = speedGain;\n\tfloat myAmp = 0.0;\n\t\n\tvec3 q = p * 5.0 - noiseMovement * mySpeedFallOff * time;\n\tfor(int i = 0; i < octaves; i++){\n\t\tmyAmp += myFallOff;\n\t\tresult += myFallOff * noise( q ); \n\t\tq = q * lacunarity - noiseMovement * time * mySpeedFallOff;\n\t\tmyFallOff *= gain;\n\t\tmySpeedFallOff *= speedGain;\n\t}\n\t\n\treturn result / myAmp;\n} \n\nvoid main(){\n\t//(normal + 1.0) / 2.0\n\n\tvec3 normal = gl_TexCoord[2].xyz; \n\t//float n0 = octavedNoise(gl_TexCoord[0].xyz); \n\t//float n1 = octavedNoise(gl_TexCoord[0].xyz + vec3(1000.0,0.0,0.0)); \n\t//float n2 = octavedNoise(gl_TexCoord[0].xyz + vec3(2000.0,0.0,0.0)); \n\t//vec3 nNormal = (vec3(n0,n1,n2) * 2.0 - 1.0) * (1.0 + gl_TexCoord[1].r * 2.);\n\t//vec3 rNormal = mix(normal, nNormal,  0.02 + gl_TexCoord[1].r * 0.4); \n\tgl_FragColor = gl_Color;\n\t//gl_FragColor = vec4((rNormal + 1.0) / 2.0,1.0); \n \n\tvec3 lightDir = normalize(vec3(0.0,0.5,1.0));\n\t\n\tfloat ppDiffuse\t\t\t= abs( dot( normal, lightDir ) );\n\n\t gl_FragColor = vec4(ppDiffuse,ppDiffuse,ppDiffuse,1.0);\n}\n\n ",
          "value": "cc.creativecomputing.control.code.CCShaderObject@591f95fc"
        },
        "vertex": {
          "name": "vertex",
          "source": "#1.4\n\nuniform sampler2D texture;\nuniform float lod;\n\nuniform sampler2D randomTexture;\nuniform vec2 randomTextureResolution; \n\n// value noise, and its analytical derivatives\nvec3 noised( in vec2 x ){\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    vec2 u = f*f*(3.0-2.0*f); \n\tfloat a = texture2D(randomTexture,(p+vec2(0.5,0.5))/256.0).x;\n\tfloat b = texture2D(randomTexture,(p+vec2(1.5,0.5))/256.0).x;\n\tfloat c = texture2D(randomTexture,(p+vec2(0.5,1.5))/256.0).x;\n\tfloat d = texture2D(randomTexture,(p+vec2(1.5,1.5))/256.0).x;\n\treturn vec3(\n\t\ta+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,\n\t\t6.0*f*(1.0-f)*(vec2(b-a,c-a)+(a-b-c+d)*u.yx)\n\t);\n} \n\nfloat fractalSum(vec2 thePos) { \n\tfloat f = 0.0;\n\tfloat w = 0.5;\n\tfloat dx = 0.0;\n\tfloat dz = 0.0;\n\t\t\n\tfor (int i = 0; i < 8; i++) {\n\t\tvec3 myNoiseV = noised(thePos);\n\t\tdx += myNoiseV[1];\n\t\tdz += myNoiseV[2];\n\t\tf += w * myNoiseV[0] / (1.0 + dx * dx + dz * dz); // replace with \"w * n[0]\" for a classic fbm()\n\t\tw *= 0.5;\n\t\tthePos *= 2.0;\n\t}\n\treturn f;\n}\n\nvec4 pos(vec2 theCoord){\n\tfloat col = fractalSum(theCoord * 4.0); \n\tvec3 pos = vec3(theCoord * 1000.0 - 500.0, col * 200.0);\n\t//float noise = octavedNoise(pos * 0.2); \n\t//pos.z += noise * 0. * col.r; \n\treturn vec4(pos,col); \n}\n\nvoid main(){\n \tvec4 pos0 = pos(gl_MultiTexCoord0.xy);\n \tvec3 pos1 = normalize(pos(gl_MultiTexCoord0.xy + vec2(0.001,0.0)).xyz - pos0.xyz);\n \tvec3 pos2 = normalize(pos(gl_MultiTexCoord0.xy + vec2(0.0,0.001)).xyz - pos0.xyz);\n\n \tvec3 normal = cross(pos1, pos2);\n\n \tgl_TexCoord[0] = pos0;\n \tgl_TexCoord[1] = vec4(pos0.w);\n \tgl_TexCoord[2] = vec4(normal,0.0);\n\t\n\tgl_Position = gl_ModelViewProjectionMatrix * vec4(pos0.xyz, 1.0);\n\tgl_FrontColor = vec4((normal + 1.0) / 2.0, 1.0);//vec4(1.0, 1.0, 1.0, 1.0);\n}\n",
          "value": "cc.creativecomputing.control.code.CCShaderObject@2fcc820b"
        }
      }
    }}
  },
  "camera controller": {
    "name": "camera controller",
    "value": {
      "distance": {
        "min": 1,
        "max": 20000,
        "name": "distance",
        "value": 8110.0303528318855
      },
      "center": {
        "name": "center",
        "value": {
          "x": {
            "min": -10000,
            "max": 10000,
            "name": "x",
            "value": -71.09597284249945
          },
          "y": {
            "min": -10000,
            "max": 10000,
            "name": "y",
            "value": -121.5388176196541
          },
          "z": {
            "min": -10000,
            "max": 10000,
            "name": "z",
            "value": 593.2893393947234
          }
        }
      },
      "rotation": {
        "name": "rotation",
        "value": {
          "w": {
            "min": -1,
            "max": 1,
            "name": "w",
            "value": -0.022578202515494902
          },
          "x": {
            "min": -1,
            "max": 1,
            "name": "x",
            "value": -0.032199692437266295
          },
          "y": {
            "min": -1,
            "max": 1,
            "name": "y",
            "value": 0.49268089621509287
          },
          "z": {
            "min": -1,
            "max": 1,
            "name": "z",
            "value": 0.8693209643640337
          }
        }
      }
    }
  },
  "noise": {
    "name": "noise",
    "value": {
      "octaves": {
        "min": 1,
        "max": 10,
        "name": "octaves",
        "value": 4
      },
      "speed x": {
        "min": -10,
        "max": 10,
        "name": "speed x",
        "value": 0
      },
      "speed y": {
        "min": -10,
        "max": 10,
        "name": "speed y",
        "value": 1
      },
      "speed gain": {
        "min": 0,
        "max": 2,
        "name": "speed gain",
        "value": 0.5
      },
      "speed z": {
        "min": -10,
        "max": 10,
        "name": "speed z",
        "value": 0
      },
      "lacunarity": {
        "min": 0,
        "max": 10,
        "name": "lacunarity",
        "value": 2
      },
      "gain": {
        "min": 0,
        "max": 1,
        "name": "gain",
        "value": 0.5
      }
    }
  },
  "attributes": {
    "name": "attributes",
    "value": {
      "point size": {
        "min": 0.1,
        "max": 50,
        "name": "point size",
        "value": 4.690800189971924
      },
      "stroke weight": {
        "min": 0.1,
        "max": 50,
        "name": "stroke weight",
        "value": 0.10000000149011612
      },
      "color": {
        "a": 1,
        "r": 0,
        "b": 0,
        "g": 0,
        "name": "color",
        "value": "ff000000"
      },
      "polygon mode": {
        "name": "polygon mode",
        "value": "FILL"
      },
      "depth test": {
        "name": "depth test",
        "value": true
      },
      "blend mode": {
        "name": "blend mode",
        "value": "BLEND"
      },
      "depth mask": {
        "name": "depth mask",
        "value": true
      }
    }
  }
}}