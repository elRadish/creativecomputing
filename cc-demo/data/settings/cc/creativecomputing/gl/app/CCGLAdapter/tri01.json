{"value": {"tri shader": {
  "name": "tri shader",
  "value": {"shader objects": {
    "name": "shader objects",
    "value": {
      "fragment": {
        "name": "fragment",
        "source": "\r\n\r\nuniform float time;\r\nuniform vec2 resolution;\r\n\r\nfloat rand(vec2 co)\r\n{\r\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\n\r\nfloat GetLocation(vec2 s, float d)\r\n{\r\n    vec2 f = s*d;\r\n\r\n    //s = mix(vec2(0), floor(s*d),step(0.5, f));\r\n\r\n    // tris\r\n    f = mod(f, 8.); // because i failed somewhere\r\n    \r\n    f = f + vec2(0,0.5)*floor(f).x;\r\n    s = fract(f);\r\n    f = floor(f);\r\n\r\n    d = s.y - 0.5;\r\n    float l = abs(d) + 0.5 * s.x;\r\n    float ff = f.x+f.y;\r\n    f = mix(f, f+sign(d)*vec2(0,0.5), step(0.5, l));\r\n    l = mix(ff, ff+sign(d)*0.5, step(0.5, l));\r\n\r\n    return l * rand(vec2(f));\r\n}\r\n\r\nvec3 hsv2rgb(float h, float s, float v)\r\n{\r\n    h = fract(h);\r\n    vec3 c = smoothstep(2./6., 1./6., abs(h - vec3(0.5, 2./6., 4./6.)));\r\n    c.r = 1.-c.r;\r\n    /*\r\n    vec3 c = vec3(\r\n    smoothstep(1./6., 2./6., abs(h -0.5)),\r\n        1.-smoothstep(1./6., 2./6., abs(h -2./6.)),\r\n        1.-smoothstep(1./6., 2./6., abs(h -4./6.))\r\n        );*/\r\n    return mix(vec3(s), vec3(1.0), c) * v;\r\n}\r\n\r\nvec3 getRandomColor(float f, float t)\r\n{\r\n    return hsv2rgb(f+t, 0.2+cos(sin(f))*0.3, 0.9);\r\n}\r\n\r\nvoid main(){\r\n\tfloat mx = max( resolution.x, resolution.y );\r\n    float t = time * 0.3;\r\n    vec2 s = gl_TexCoord[0].yx / mx + vec2(t, 0) * 0.2;\r\n\r\n\r\n    float f[3];\r\n    f[0] = GetLocation(s, 12.);\r\n    f[1] = GetLocation(s, 6.);\r\n    f[2] = GetLocation(s, 3.);\r\n\r\n    vec3 color = getRandomColor(f[1] *0.05 + 0.01*f[0] + 0.9*f[2], t);\r\n\r\n    \r\n\tgl_FragData[0] =  vec4(color, 1.);\r\n\tgl_FragData[1] = gl_TexCoord[1];\r\n\tgl_FragData[2] = gl_TexCoord[2];\r\n\tgl_FragData[3] = gl_TexCoord[3];\r\n}\r\n\n",
        "value": "cc.creativecomputing.control.code.CCShaderObject@25eca824"
      },
      "vertex": {
        "name": "vertex",
        "source": "#version 120 \n\nvoid main(){\n\tgl_TexCoord[0] = gl_MultiTexCoord0;\n\tgl_TexCoord[1] = gl_MultiTexCoord1;\n\tgl_TexCoord[2] = gl_MultiTexCoord2;\n\tgl_TexCoord[3] = gl_MultiTexCoord3;\n\t\n\tgl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * gl_Vertex;\n}\n",
        "value": "cc.creativecomputing.control.code.CCShaderObject@4989543a"
      }
    }
  }}
}}}